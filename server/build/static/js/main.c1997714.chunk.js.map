{"version":3,"sources":["component/getTest.js","component/count.js","component/BigText.js","containers/Home.js","containers/About.js","containers/Posts.js","component/Header.js","App.js","serviceWorker.js","Routes.js","index.js"],"names":["GetTest","props","getText","e","setState","textArea","target","value","gStates","bind","pStates","state","name","console","log","axios","get","this","then","response","data","post","params","user","type","onChange","onClick","Component","Count","incnum","decnum","number","BigText","children","className","Home","search","location","React","About","Posts","MenuItem","to","Header","exact","path","component","App","title","fetch","res","json","Boolean","window","hostname","match","Routes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1997714.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\nclass GetTest extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.gStates = this.gStates.bind(this);\r\n        this.pStates = this.pStates.bind(this);\r\n        this.getText = this.getText.bind(this);\r\n        this.state = {\r\n            name: null,\r\n            textArea: \" \"\r\n        }\r\n    }\r\n\r\n    gStates(){\r\n        console.log(\"ss\");\r\n        const response = axios.get(\r\n            '/user/?user=YUKJISEONG' + this.state.textArea\r\n        )\r\n        .then(response => {\r\n            console.log(response.data)   \r\n            this.setState({\r\n                name: response.data['user']\r\n            })\r\n        })\r\n    }\r\n\r\n    pStates(){\r\n        console.log(\"post\");\r\n        \r\n        axios.post(\r\n            '/post', {params: {name: this.state.name, user: this.state.textArea}}\r\n        )\r\n        .then(response => {\r\n            console.log(response.data)   \r\n            this.setState({\r\n                name: response.data\r\n            })\r\n        })\r\n    }\r\n\r\n    getText = (e) =>{\r\n        this.setState({\r\n            textArea:e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {name} = this.state\r\n        return(\r\n            <div>\r\n                <input type='text' onChange={this.getText}></input>\r\n                {name ? <h1>{name}</h1>:<h1>loading...</h1>}\r\n                <button onClick={this.gStates}>getTest</button>\r\n                <button onClick={this.pStates}>postTest</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n//\r\n\r\nexport default GetTest","import React, { Component } from 'react';\r\nclass Count extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.incnum = this.incnum.bind(this);\r\n        this.decnum = this.decnum.bind(this);\r\n        this.state = {\r\n            number: 0 \r\n        }\r\n\r\n    }\r\n\r\n\r\n    incnum() {\r\n        console.log('inc.....');\r\n        this.setState({\r\n            number: this.state.number + 1\r\n        });\r\n    }\r\n\r\n    decnum(){\r\n        console.log('dec....');\r\n        this.setState({\r\n            number:this.state.number -1\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>number : {this.state.number}</h1>\r\n                <button onClick={this.incnum}>inc</button>\r\n                <button onClick={this.decnum}>dec</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Count","import React from 'react';\r\nimport './BigText.css';\r\n\r\nconst BigText = ({children}) => {\r\n    return (\r\n        <div className=\"big-text\">\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BigText;","import React from 'react';\r\nimport BigText from '../component/BigText';\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n\r\n        const { search } = this.props.location;\r\n        return(\r\n        <div>\r\n            <BigText>홈</BigText>\r\n            { search }\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Home;","import React from 'react';\r\nimport BigText from '../component/BigText';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n           <BigText>소개</BigText>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;","import React from 'react';\r\nimport BigText from '../component/BigText';\r\n\r\nconst Posts = () => {\r\n    return (\r\n        <div>\r\n            <BigText>포스트</BigText>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Posts;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\nimport './Header.css';\r\nimport Home from '../containers/Home';\r\nimport About from '../containers/About';\r\nimport Posts from '../containers/Posts';\r\n\r\n// 아래 중요!\r\nconst MenuItem = ({children, to}) => (\r\n    <Link className=\"menu-item\" to={to}>\r\n            {children}\r\n    </Link>\r\n)\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <Router>\r\n                <div className=\"logo\">\r\n                    GoodMan\r\n                </div>\r\n                    <div className=\"menu\">\r\n                        <Link className=\"menu-item\" to=\"/\">홈</Link>\r\n                        <Link className=\"menu-item\" to=\"/About\">소개</Link>\r\n                        <MenuItem to=\"/Posts\">포스트</MenuItem>\r\n                    </div>\r\n                <div>\r\n                    <Switch>\r\n                        <Route exact path='/' component={Home} />\r\n                        <Route path='/About' component={About} />\r\n                        <Route path='/Posts' component={Posts} />\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\n// import axios from 'axios'\nimport GetTest from './component/getTest'\n//import logo from './logo.svg';\nimport './App.css';\n//import Hello2 from './component/hello2';\n//import Hello from './component/hello';\nimport Count from './component/count';\nimport Header from './component/Header';\n\n\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      title: null\n    };\n  }\n  componentDidMount() {\n    console.log(\"qqqq\") \n    console.log(\"qqqq\") \n    fetch('http://localhost:3001/api')\n    .then(res => res.json())\n    .then(data => this.setState({title: data.title}));\n  }\n\n\n  render(){\n\n    console.log(this.state.title)\n    const {title} = this.state;\n    return (\n      \n\n      <div className=\"App\">\n      <div>\n        <Header/>\n        {this.props.children}\n      </div>\n\n        <header className=\"App-header\">\n            {title ? <h1>{title}</h1>:<h1>loading...</h1>}\n            <GetTest />\n            <Count />\n        </header>\n      </div>\n    );}\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport Home from './containers/Home';\r\nimport About from './containers/About';\r\nimport Posts from './containers/Posts';\r\n\r\n\r\nexport default class Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={App} />\r\n          <Route exact path=\"/Home\" component={Home} />\r\n          <Route exact path=\"/About\" component={About} />\r\n          <Route exact path=\"/Posts\" component={Posts} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Home from './containers/Home';\nimport About from './containers/About';\nimport Posts from './containers/Posts';\n\nimport Routes from \"./Routes\"; //-> Routes 컴포넌트 연결\n\nReactDOM.render(\n  <Routes />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}